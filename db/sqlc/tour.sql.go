// Code generated by sqlc. DO NOT EDIT.
// source: tour.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTour = `-- name: CreateTour :one
INSERT INTO "tour" ( "name", "duration", "maxGroupSize", "difficulty", "ratingsAverage", "ratingsQuantity", "price", "summary", "description", "imageCover", "images", "startDates", "secret_tour", "startlocationId", "locationId") 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING "id", "name", "duration", "maxGroupSize", "difficulty", "ratingsAverage", "ratingsQuantity", "price", "summary", "description", "imageCover", "images", "startDates", "secret_tour", "startlocationId", "locationId"
`

type CreateTourParams struct {
	Name            string         `json:"name"`
	Duration        int64          `json:"duration"`
	MaxGroupSize    int64          `json:"maxGroupSize"`
	Difficulty      string         `json:"difficulty"`
	RatingsAverage  int64          `json:"ratingsAverage"`
	RatingsQuantity sql.NullInt64  `json:"ratingsQuantity"`
	Price           int64          `json:"price"`
	Summary         string         `json:"summary"`
	Description     string         `json:"description"`
	ImageCover      sql.NullString `json:"imageCover"`
	Images          sql.NullString `json:"images"`
	StartDates      time.Time      `json:"startDates"`
	SecretTour      sql.NullBool   `json:"secret_tour"`
	StartlocationId sql.NullInt64  `json:"startlocationId"`
	LocationId      sql.NullInt64  `json:"locationId"`
}

type CreateTourRow struct {
	ID              int64          `json:"id"`
	Name            string         `json:"name"`
	Duration        int64          `json:"duration"`
	MaxGroupSize    int64          `json:"maxGroupSize"`
	Difficulty      string         `json:"difficulty"`
	RatingsAverage  int64          `json:"ratingsAverage"`
	RatingsQuantity sql.NullInt64  `json:"ratingsQuantity"`
	Price           int64          `json:"price"`
	Summary         string         `json:"summary"`
	Description     string         `json:"description"`
	ImageCover      sql.NullString `json:"imageCover"`
	Images          sql.NullString `json:"images"`
	StartDates      time.Time      `json:"startDates"`
	SecretTour      sql.NullBool   `json:"secret_tour"`
	StartlocationId sql.NullInt64  `json:"startlocationId"`
	LocationId      sql.NullInt64  `json:"locationId"`
}

func (q *Queries) CreateTour(ctx context.Context, arg CreateTourParams) (CreateTourRow, error) {
	row := q.db.QueryRowContext(ctx, createTour,
		arg.Name,
		arg.Duration,
		arg.MaxGroupSize,
		arg.Difficulty,
		arg.RatingsAverage,
		arg.RatingsQuantity,
		arg.Price,
		arg.Summary,
		arg.Description,
		arg.ImageCover,
		arg.Images,
		arg.StartDates,
		arg.SecretTour,
		arg.StartlocationId,
		arg.LocationId,
	)
	var i CreateTourRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Duration,
		&i.MaxGroupSize,
		&i.Difficulty,
		&i.RatingsAverage,
		&i.RatingsQuantity,
		&i.Price,
		&i.Summary,
		&i.Description,
		&i.ImageCover,
		&i.Images,
		&i.StartDates,
		&i.SecretTour,
		&i.StartlocationId,
		&i.LocationId,
	)
	return i, err
}

const deleteTour = `-- name: DeleteTour :exec
DELETE FROM "tour" WHERE "id" = $1
`

func (q *Queries) DeleteTour(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTour, id)
	return err
}

const getAllTours = `-- name: GetAllTours :one
SELECT id, name, duration, created_at, maxGroupSize, difficulty, ratingsAverage, ratingsQuantity, price, summary, description, imageCover, images, startDates, secret_tour, startlocationId, locationId FROM "tour"
`

func (q *Queries) GetAllTours(ctx context.Context) (Tour, error) {
	row := q.db.QueryRowContext(ctx, getAllTours)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Duration,
		&i.CreatedAt,
		&i.MaxGroupSize,
		&i.Difficulty,
		&i.RatingsAverage,
		&i.RatingsQuantity,
		&i.Price,
		&i.Summary,
		&i.Description,
		&i.ImageCover,
		&i.Images,
		&i.StartDates,
		&i.SecretTour,
		&i.StartlocationId,
		&i.LocationId,
	)
	return i, err
}

const getTourByID = `-- name: GetTourByID :one
SELECT id, name, duration, created_at, maxGroupSize, difficulty, ratingsAverage, ratingsQuantity, price, summary, description, imageCover, images, startDates, secret_tour, startlocationId, locationId FROM "tour" WHERE "id" = $1
`

func (q *Queries) GetTourByID(ctx context.Context, id int64) (Tour, error) {
	row := q.db.QueryRowContext(ctx, getTourByID, id)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Duration,
		&i.CreatedAt,
		&i.MaxGroupSize,
		&i.Difficulty,
		&i.RatingsAverage,
		&i.RatingsQuantity,
		&i.Price,
		&i.Summary,
		&i.Description,
		&i.ImageCover,
		&i.Images,
		&i.StartDates,
		&i.SecretTour,
		&i.StartlocationId,
		&i.LocationId,
	)
	return i, err
}

const updateTour = `-- name: UpdateTour :exec
UPDATE "tour"
SET "name" = $1, "duration" = $2, "maxGroupSize" = $3, "difficulty" = $4, "ratingsAverage" = $5, "ratingsQuantity" = $6, "price" = $7, "summary" = $8, "description" = $9, "imageCover" = $10, "images" = $11, "startDates" = $12, "secret_tour" = $13, "startlocationId" = $14, "locationId" = $15
WHERE "id" = $16
RETURNING id, name, duration, created_at, maxGroupSize, difficulty, ratingsAverage, ratingsQuantity, price, summary, description, imageCover, images, startDates, secret_tour, startlocationId, locationId
`

type UpdateTourParams struct {
	Name            string         `json:"name"`
	Duration        int64          `json:"duration"`
	MaxGroupSize    int64          `json:"maxGroupSize"`
	Difficulty      string         `json:"difficulty"`
	RatingsAverage  int64          `json:"ratingsAverage"`
	RatingsQuantity sql.NullInt64  `json:"ratingsQuantity"`
	Price           int64          `json:"price"`
	Summary         string         `json:"summary"`
	Description     string         `json:"description"`
	ImageCover      sql.NullString `json:"imageCover"`
	Images          sql.NullString `json:"images"`
	StartDates      time.Time      `json:"startDates"`
	SecretTour      sql.NullBool   `json:"secret_tour"`
	StartlocationId sql.NullInt64  `json:"startlocationId"`
	LocationId      sql.NullInt64  `json:"locationId"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateTour(ctx context.Context, arg UpdateTourParams) error {
	_, err := q.db.ExecContext(ctx, updateTour,
		arg.Name,
		arg.Duration,
		arg.MaxGroupSize,
		arg.Difficulty,
		arg.RatingsAverage,
		arg.RatingsQuantity,
		arg.Price,
		arg.Summary,
		arg.Description,
		arg.ImageCover,
		arg.Images,
		arg.StartDates,
		arg.SecretTour,
		arg.StartlocationId,
		arg.LocationId,
		arg.ID,
	)
	return err
}
