// Code generated by sqlc. DO NOT EDIT.
// source: review.sql

package db

import (
	"context"
	"database/sql"
)

const createReview = `-- name: CreateReview :one
INSERT INTO "review" ("id", "review", "rating", "tour", "user") 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, review, rating, tour, "user"
`

type CreateReviewParams struct {
	ID     int64         `json:"id"`
	Review string        `json:"review"`
	Rating int64         `json:"rating"`
	Tour   sql.NullInt64 `json:"tour"`
	User   sql.NullInt64 `json:"user"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.ID,
		arg.Review,
		arg.Rating,
		arg.Tour,
		arg.User,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Review,
		&i.Rating,
		&i.Tour,
		&i.User,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM "review" WHERE "id" = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getAllReviews = `-- name: GetAllReviews :many
SELECT id, created_at, review, rating, tour, "user" FROM "review"
`

func (q *Queries) GetAllReviews(ctx context.Context) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getAllReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Review,
			&i.Rating,
			&i.Tour,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewByID = `-- name: GetReviewByID :one
SELECT id, created_at, review, rating, tour, "user" FROM "review" WHERE "id" = $1
`

func (q *Queries) GetReviewByID(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReviewByID, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Review,
		&i.Rating,
		&i.Tour,
		&i.User,
	)
	return i, err
}

const updateReview = `-- name: UpdateReview :exec
UPDATE "review"
SET "review" = $1, "rating" = $2, "tour" = $3, "user" = $4
WHERE "id" = $5
RETURNING id, created_at, review, rating, tour, "user"
`

type UpdateReviewParams struct {
	Review string        `json:"review"`
	Rating int64         `json:"rating"`
	Tour   sql.NullInt64 `json:"tour"`
	User   sql.NullInt64 `json:"user"`
	ID     int64         `json:"id"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) error {
	_, err := q.db.ExecContext(ctx, updateReview,
		arg.Review,
		arg.Rating,
		arg.Tour,
		arg.User,
		arg.ID,
	)
	return err
}
