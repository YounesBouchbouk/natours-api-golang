// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" ("name", "email", "role","photo", "password", "confirmpassword") 
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, role, photo, password, confirmpassword, isPsswordChanged, passwordResetToken, passwordResetExpires, active, created_at
`

type CreateUserParams struct {
	Name            string         `json:"name"`
	Email           string         `json:"email"`
	Role            string         `json:"role"`
	Photo           sql.NullString `json:"photo"`
	Password        string         `json:"password"`
	Confirmpassword string         `json:"confirmpassword"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Photo,
		arg.Password,
		arg.Confirmpassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Photo,
		&i.Password,
		&i.Confirmpassword,
		&i.IsPsswordChanged,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" WHERE "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, role, photo, password, confirmpassword, isPsswordChanged, passwordResetToken, passwordResetExpires, active, created_at FROM "user"
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.Photo,
			&i.Password,
			&i.Confirmpassword,
			&i.IsPsswordChanged,
			&i.PasswordResetToken,
			&i.PasswordResetExpires,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, role, photo, password, confirmpassword, isPsswordChanged, passwordResetToken, passwordResetExpires, active, created_at FROM "user" WHERE "id" = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Photo,
		&i.Password,
		&i.Confirmpassword,
		&i.IsPsswordChanged,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET "name" = $2 , "email" = $3, "role" = $4
WHERE "id" = $1
RETURNING id, name, email, role, photo, password, confirmpassword, isPsswordChanged, passwordResetToken, passwordResetExpires, active, created_at
`

type UpdateUserParams struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Role  string `json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
	)
	return err
}
