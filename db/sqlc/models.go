// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type Difficulty string

const (
	DifficultyLow      Difficulty = "low"
	DifficultyMedieum  Difficulty = "medieum"
	DifficultyHard     Difficulty = "hard"
	DifficultyVeryHard Difficulty = "very_hard"
)

func (e *Difficulty) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Difficulty(s)
	case string:
		*e = Difficulty(s)
	default:
		return fmt.Errorf("unsupported scan type for Difficulty: %T", src)
	}
	return nil
}

type LocationType string

const (
	LocationTypePoint  LocationType = "point"
	LocationTypeSquare LocationType = "square"
	LocationTypeCircle LocationType = "circle"
)

func (e *LocationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LocationType(s)
	case string:
		*e = LocationType(s)
	default:
		return fmt.Errorf("unsupported scan type for LocationType: %T", src)
	}
	return nil
}

type Role string

const (
	RoleUser      Role = "user"
	RoleAdmin     Role = "admin"
	RoleGuide     Role = "guide"
	RoleLeadguide Role = "leadguide"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type Booking struct {
	Tour      sql.NullInt64 `json:"tour"`
	User      sql.NullInt64 `json:"user"`
	Price     int64         `json:"price"`
	CreatedAt sql.NullTime  `json:"created_at"`
	Paid      int64         `json:"paid"`
}

type Location struct {
	ID          int64          `json:"id"`
	Lat         int64          `json:"lat"`
	Long        int64          `json:"long"`
	Address     string         `json:"address"`
	Description sql.NullString `json:"description"`
	Day         sql.NullInt64  `json:"day"`
	Type        LocationType   `json:"type"`
}

type Review struct {
	ID        int64         `json:"id"`
	CreatedAt sql.NullTime  `json:"created_at"`
	Review    string        `json:"review"`
	Rating    int64         `json:"rating"`
	Tour      sql.NullInt64 `json:"tour"`
	User      sql.NullInt64 `json:"user"`
}

type StartLocation struct {
	ID          int64          `json:"id"`
	Lat         int64          `json:"lat"`
	Long        int64          `json:"long"`
	Address     string         `json:"address"`
	Description sql.NullString `json:"description"`
	Type        LocationType   `json:"type"`
}

type Tour struct {
	ID              int64          `json:"id"`
	Name            string         `json:"name"`
	Duration        int64          `json:"duration"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	MaxGroupSize    int64          `json:"maxGroupSize"`
	Difficulty      string         `json:"difficulty"`
	RatingsAverage  int64          `json:"ratingsAverage"`
	RatingsQuantity sql.NullInt64  `json:"ratingsQuantity"`
	Price           int64          `json:"price"`
	Summary         string         `json:"summary"`
	Description     string         `json:"description"`
	ImageCover      sql.NullString `json:"imageCover"`
	Images          sql.NullString `json:"images"`
	StartDates      time.Time      `json:"startDates"`
	SecretTour      sql.NullBool   `json:"secret_tour"`
	StartlocationId sql.NullInt64  `json:"startlocationId"`
	LocationId      sql.NullInt64  `json:"locationId"`
}

type User struct {
	ID              int64        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	Role            string       `json:"role"`
	Photo           string       `json:"photo"`
	Password        string       `json:"password"`
	Confirmpassword string       `json:"confirmpassword"`
	Active          sql.NullBool `json:"active"`
	CreatedAt       sql.NullTime `json:"created_at"`
}
