// Code generated by sqlc. DO NOT EDIT.
// source: startLocation.sql

package db

import (
	"context"
	"database/sql"
)

const createStartLocation = `-- name: CreateStartLocation :one

INSERT INTO "startLocation" ("id", "lat", "long", "address", "description", "type") 
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING "id", "lat", "long", "address", "description", "type"
`

type CreateStartLocationParams struct {
	ID          int64          `json:"id"`
	Lat         int64          `json:"lat"`
	Long        int64          `json:"long"`
	Address     string         `json:"address"`
	Description sql.NullString `json:"description"`
	Type        LocationType   `json:"type"`
}

// startLocation.sql
func (q *Queries) CreateStartLocation(ctx context.Context, arg CreateStartLocationParams) (StartLocation, error) {
	row := q.db.QueryRowContext(ctx, createStartLocation,
		arg.ID,
		arg.Lat,
		arg.Long,
		arg.Address,
		arg.Description,
		arg.Type,
	)
	var i StartLocation
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Long,
		&i.Address,
		&i.Description,
		&i.Type,
	)
	return i, err
}

const deleteStartLocation = `-- name: DeleteStartLocation :exec
DELETE FROM "startLocation" WHERE "id" = $1
`

func (q *Queries) DeleteStartLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStartLocation, id)
	return err
}

const getStartLocationByID = `-- name: GetStartLocationByID :one
SELECT id, lat, long, address, description, type FROM "startLocation" WHERE "id" = $1
`

func (q *Queries) GetStartLocationByID(ctx context.Context, id int64) (StartLocation, error) {
	row := q.db.QueryRowContext(ctx, getStartLocationByID, id)
	var i StartLocation
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Long,
		&i.Address,
		&i.Description,
		&i.Type,
	)
	return i, err
}

const updateStartLocation = `-- name: UpdateStartLocation :exec
UPDATE "startLocation"
SET "lat" = $1, "long" = $2, "address" = $3, "description" = $4, "type" = $5
WHERE "id" = $6
`

type UpdateStartLocationParams struct {
	Lat         int64          `json:"lat"`
	Long        int64          `json:"long"`
	Address     string         `json:"address"`
	Description sql.NullString `json:"description"`
	Type        LocationType   `json:"type"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateStartLocation(ctx context.Context, arg UpdateStartLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateStartLocation,
		arg.Lat,
		arg.Long,
		arg.Address,
		arg.Description,
		arg.Type,
		arg.ID,
	)
	return err
}
