// Code generated by sqlc. DO NOT EDIT.
// source: booking.sql

package db

import (
	"context"
	"database/sql"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO "booking" ("tour", "user", "price", "paid") 
VALUES ($1, $2, $3, $4)
RETURNING tour, "user", price, created_at, paid
`

type CreateBookingParams struct {
	Tour  sql.NullInt64 `json:"tour"`
	User  sql.NullInt64 `json:"user"`
	Price int64         `json:"price"`
	Paid  bool          `json:"paid"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.Tour,
		arg.User,
		arg.Price,
		arg.Paid,
	)
	var i Booking
	err := row.Scan(
		&i.Tour,
		&i.User,
		&i.Price,
		&i.CreatedAt,
		&i.Paid,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM "booking" WHERE "tour" = $1 AND "user" = $2
`

type DeleteBookingParams struct {
	Tour sql.NullInt64 `json:"tour"`
	User sql.NullInt64 `json:"user"`
}

func (q *Queries) DeleteBooking(ctx context.Context, arg DeleteBookingParams) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, arg.Tour, arg.User)
	return err
}

const getAllBooking = `-- name: GetAllBooking :many
SELECT tour, "user", price, created_at, paid FROM "booking"
`

func (q *Queries) GetAllBooking(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.Tour,
			&i.User,
			&i.Price,
			&i.CreatedAt,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingByTourAndUser = `-- name: GetBookingByTourAndUser :many
SELECT tour, "user", price, created_at, paid FROM "booking" 
WHERE "tour" = $1 AND "user" = $2
ORDER BY created_at
`

type GetBookingByTourAndUserParams struct {
	Tour sql.NullInt64 `json:"tour"`
	User sql.NullInt64 `json:"user"`
}

func (q *Queries) GetBookingByTourAndUser(ctx context.Context, arg GetBookingByTourAndUserParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getBookingByTourAndUser, arg.Tour, arg.User)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.Tour,
			&i.User,
			&i.Price,
			&i.CreatedAt,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :exec
UPDATE "booking"
SET "price" = $1, "paid" = $2
WHERE "tour" = $3 AND "user" = $4
RETURNING tour, "user", price, created_at, paid
`

type UpdateBookingParams struct {
	Price int64         `json:"price"`
	Paid  bool          `json:"paid"`
	Tour  sql.NullInt64 `json:"tour"`
	User  sql.NullInt64 `json:"user"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) error {
	_, err := q.db.ExecContext(ctx, updateBooking,
		arg.Price,
		arg.Paid,
		arg.Tour,
		arg.User,
	)
	return err
}
